"""
1. Написать функцию host_ping(), в которой с помощью утилиты ping будет проверяться
   доступность сетевых узлов. Аргументом функции является список, в котором каждый сетевой
   узел должен быть представлен именем хоста или ip-адресом. В функции необходимо
   перебирать ip-адреса и проверять их доступность с выводом соответствующего сообщения
   («Узел доступен», «Узел недоступен»). При этом ip-адрес сетевого узла должен создаваться с
   помощью функции ip_address().
2. Написать функцию host_range_ping() для перебора ip-адресов из заданного диапазона.
   Меняться должен только последний октет каждого адреса. По результатам проверки должно
   выводиться соответствующее сообщение.
3. Написать функцию host_range_ping_tab(), возможности которой основаны на функции из
   примера 2. Но в данном случае результат должен быть итоговым по всем ip-адресам,
   представленным в табличном формате (использовать модуль tabulate). 
"""

import socket, re, math
from socket import gaierror
from ipaddress import ip_address, ip_network
from subprocess import Popen, PIPE
from sys import platform
from tabulate import tabulate

#--------------- Task 1 ----------------
RE_IP = r"^(?:(?:[01]?\d\d?|2[0-4]\d|25[0-5])(?:\.(?:[01]?\d\d?|2[0-4]\d|25[0-5])){3})$"


def host_ping(list_addresses: list, timeout: int = 600, count: int = 1):
    # В системах linux и mac для указания кол-ва ping запросов используется ключ "-с".
    # В системах Windows для указания кол-ва ping запросов используется ключ "-n".
    count = f"-n {count}" if "win" in platform else f"-c {count}"
    # В системах linux и mac время ожидания ответа "-w" указывается в секундах (целое чисо).
    # В системах Windows время ожидания ответа "-w" указывается в милисекундах (целое чисо).
    timeout =  timeout if "win" in platform else math.ceil(timeout/1000)
    # словарь с результатами
    result = {
        "Доступные узлы": [],
        "Недоступные узлы": []
    }
    
    for address in list_addresses:
        code = None
        # Резолвим доменное имя
        ip = re.match(RE_IP, str(address))
        if ip is None:
            try:
                ip = socket.gethostbyname(address)
            except gaierror:
                code = 1
        else:
            ip = ip[0]
        
        if code is None:
            ip = ip_address(ip)
            proc = Popen(f"ping {ip} -w {timeout} {count}", shell=True, stdout=PIPE)
            proc.wait()
            code = proc.returncode
        if code == 0:
            result["Доступные узлы"].append(address)
            print(f"{address} Узел доступен")         
        else:
            result["Недоступные узлы"].append(address)
            print(f"{address} Узел недоступен")
    # print(result)
    return result


#--------------- Task 2 ----------------
def input_address(message):
    while True:
        # запрос адреса
        try:
            address = input(f'Введите {message} IP-адрес диапазона проверки: ')
            ip = ip_address(address)
            break
        except ValueError:        
            print("Введён некорректный IP-адрес !!!")
    return ip


def host_range_ping():
    while True:
        # запрос первоначального адреса
        start_ip = input_address('начальный')
        # запрос конечного адреса
        end_ip = input_address('конечный')
        # Проверка введённых данных
        net_start_ip = ip_network(f"{start_ip}/24", strict=False)
        net_end_ip = ip_network(f"{end_ip}/24", strict=False)
        if start_ip >= end_ip:
            print("Конечный IP-адрес не может быть меньше или равен начальному IP-адресу !!!")
            print("  Повторите ввод IP-адресов.\n")
        elif net_start_ip != net_end_ip :
            print("Введённые IP-адреса должны быть в одной подсети с маской /24 !!!")
            print("  Повторите ввод IP-адресов.\n")
        else:
            break
    # Количество узлов в задонном диапазоне
    range_ip = int(end_ip + 1) - int(start_ip)
    host_list = []
    [host_list.append(str(start_ip + x)) for x in range(range_ip)]

    # передаем список в функцию из задания 1 для проверки доступности
    return host_ping(host_list)


#--------------- Task 3 ----------------
def host_range_ping_tab():
    # запрашиваем хосты, проверяем доступность, получаем словарь результатов
    res_dict = host_range_ping()
    print()
    # выводим в табличном виде
    print(tabulate(res_dict, headers='keys', tablefmt="pipe", stralign="center"))


if __name__ == "__main__":
    print('-------------------------------- Task 1 ----------------------------\n')
    host_ping(["8.8.8.8", "ya.ru", "10.0.0.1", "gggggg.ru"])

## 8.8.8.8 Узел доступен
## ya.ru Узел доступен
## 10.0.0.1 Узел недоступен
## gggggg.ru Узел недоступен
   
    print('-------------------------------- Task 2 ----------------------------\n')
    host_range_ping()

## Введите начальный IP-адрес диапазона проверки: 192.168.42.133
## Введите конечный IP-адрес диапазона проверки: 192.168.42.13 
## Конечный IP-адрес не может быть меньше или равен начальному IP-адресу !!!
## Повторите ввод IP-адресов.
## 
## Введите начальный IP-адрес диапазона проверки: 192.168.42.1333
## Введён некорректный IP-адрес !!!
## Введите начальный IP-адрес диапазона проверки: 192.168.42.133
## Введите конечный IP-адрес диапазона проверки: 192.168.43.134
## Введённые IP-адреса должны быть в одной подсети с маской /24 !!!
##   Повторите ввод IP-адресов.
## 
## Введите начальный IP-адрес диапазона проверки: 192.168.42.133
## Введите конечный IP-адрес диапазона проверки: 192.168.42.143
## 192.168.42.133 Узел недоступен
## 192.168.42.134 Узел доступен
## 192.168.42.135 Узел недоступен
## 192.168.42.136 Узел недоступен
## 192.168.42.137 Узел недоступен
## 192.168.42.138 Узел недоступен
## 192.168.42.139 Узел доступен
## 192.168.42.140 Узел доступен
## 192.168.42.141 Узел недоступен
## 192.168.42.142 Узел недоступен
## 192.168.42.143 Узел недоступен

    print('-------------------------------- Task 3 ----------------------------\n')
    host_range_ping_tab()

## |  Доступные узлы  |  Недоступные узлы  |
## |:----------------:|:------------------:|
## |  192.168.42.134  |   192.168.42.133   |
## |  192.168.42.139  |   192.168.42.135   |
## |  192.168.42.140  |   192.168.42.136   |
## |                  |   192.168.42.137   |
## |                  |   192.168.42.138   |
## |                  |   192.168.42.141   |
## |                  |   192.168.42.142   |
## |                  |   192.168.42.143   |
